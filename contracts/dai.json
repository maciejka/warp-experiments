{"cairo_code": "%lang starknet\n\nfrom evm.array import validate_array\nfrom evm.calls import calldataload, calldatasize, caller\nfrom evm.exec_env import ExecutionEnvironment\nfrom evm.hashing import uint256_pedersen\nfrom evm.memory import uint256_mload, uint256_mstore\nfrom evm.uint256 import is_eq, is_gt, is_lt, is_zero, slt, u256_add, u256_shr\nfrom evm.yul_api import address, log2, log3, warp_return\nfrom starkware.cairo.common.cairo_builtins import BitwiseBuiltin, HashBuiltin\nfrom starkware.cairo.common.default_dict import default_dict_finalize, default_dict_new\nfrom starkware.cairo.common.dict_access import DictAccess\nfrom starkware.cairo.common.registers import get_fp_and_pc\nfrom starkware.cairo.common.uint256 import (\n    Uint256, uint256_and, uint256_not, uint256_or, uint256_sub)\n\nfunc __warp_identity_Uint256(arg0 : Uint256) -> (arg0 : Uint256):\n    return (arg0)\nend\n\nfunc __warp_constant_0() -> (res : Uint256):\n    return (Uint256(low=0, high=0))\nend\n\nfunc sstore{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        key : Uint256, value : Uint256):\n    evm_storage.write(key, value)\n    return ()\nend\n\nfunc sload{pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        value : Uint256):\n    let (value) = evm_storage.read(key)\n    return (value)\nend\n\n@storage_var\nfunc evm_storage(arg0 : Uint256) -> (res : Uint256):\nend\n\n@constructor\nfunc constructor{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    with memory_dict, msize:\n        __constructor_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return ()\nend\n\n@external\nfunc __main{\n        bitwise_ptr : BitwiseBuiltin*, pedersen_ptr : HashBuiltin*, range_check_ptr,\n        syscall_ptr : felt*}(calldata_size, calldata_len, calldata : felt*) -> (\n        returndata_size, returndata_len, returndata : felt*):\n    alloc_locals\n    validate_array(calldata_size, calldata_len, calldata)\n    let (__fp__, _) = get_fp_and_pc()\n    local exec_env_ : ExecutionEnvironment = ExecutionEnvironment(calldata_size=calldata_size, calldata_len=calldata_len, calldata=calldata, returndata_size=0, returndata_len=0, returndata=cast(0, felt*), to_returndata_size=0, to_returndata_len=0, to_returndata=cast(0, felt*))\n    let exec_env : ExecutionEnvironment* = &exec_env_\n    let (memory_dict) = default_dict_new(0)\n    let memory_dict_start = memory_dict\n    let msize = 0\n    let termination_token = 0\n    with exec_env, memory_dict, msize, termination_token:\n        __main_meat()\n    end\n    default_dict_finalize(memory_dict_start, memory_dict, 0)\n    return (exec_env.to_returndata_size, exec_env.to_returndata_len, exec_env.to_returndata)\nend\n\nfunc __constructor_meat{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}() -> ():\n    alloc_locals\n    let (_1 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=_1)\n    let (__warp_subexpr_0 : Uint256) = __warp_constant_0()\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_1 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_1)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_2 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_2, value=Uint256(low=1, high=0))\n    let (__warp_subexpr_3 : Uint256) = caller()\n    log2(\n        _1,\n        Uint256(low=0, high=0),\n        Uint256(low=223900192535450488218712201491897670240, high=293833134190415102004153989462159305800),\n        __warp_subexpr_3)\n    return ()\nend\n\nfunc abi_decode{range_check_ptr}(dataEnd : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=0, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc copy_literal_to_memory_0b1461ddc0c1d5ded79a1db0f74dae949050a7c0b28728c724b24958c27a328b{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}() -> (\n        memPtr : Uint256):\n    alloc_locals\n    let (memPtr_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (newFreePtr : Uint256) = u256_add(memPtr_1, Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = is_lt(newFreePtr, memPtr_1)\n    let (__warp_subexpr_1 : Uint256) = is_gt(newFreePtr, Uint256(low=18446744073709551615, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_or(__warp_subexpr_1, __warp_subexpr_2)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=64, high=0), value=newFreePtr)\n    uint256_mstore(offset=memPtr_1, value=Uint256(low=14, high=0))\n    let memPtr : Uint256 = memPtr_1\n    let (__warp_subexpr_3 : Uint256) = u256_add(memPtr_1, Uint256(low=32, high=0))\n    uint256_mstore(\n        offset=__warp_subexpr_3, value=Uint256(low=0, high=90893288722789692614667109424239083520))\n    return (memPtr)\nend\n\nfunc __warp_loop_body_0{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        _1 : Uint256, headStart : Uint256, i : Uint256, value0 : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_4 : Uint256) = u256_add(value0, i)\n    let (__warp_subexpr_3 : Uint256) = u256_add(__warp_subexpr_4, _1)\n    let (__warp_subexpr_2 : Uint256) = u256_add(headStart, i)\n    let (__warp_subexpr_1 : Uint256) = uint256_mload(__warp_subexpr_3)\n    let (__warp_subexpr_0 : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=64, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=__warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_loop_0{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        _1 : Uint256, headStart : Uint256, i : Uint256, length : Uint256, value0 : Uint256) -> (\n        i : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(i, length)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        return (i)\n    end\n    __warp_loop_body_0(_1, headStart, i, value0)\n    let (i : Uint256) = u256_add(i, _1)\n    let (i : Uint256) = __warp_loop_0(_1, headStart, i, length, value0)\n    return (i)\nend\n\nfunc __warp_block_0{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, length : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(headStart, length)\n    let (__warp_subexpr_0 : Uint256) = u256_add(__warp_subexpr_1, Uint256(low=64, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_if_0{memory_dict : DictAccess*, msize, range_check_ptr}(\n        __warp_subexpr_1 : Uint256, headStart : Uint256, length : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        __warp_block_0(headStart, length)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc abi_encode_string{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    uint256_mstore(offset=headStart, value=Uint256(low=32, high=0))\n    let (length : Uint256) = uint256_mload(value0)\n    let (__warp_subexpr_0 : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=__warp_subexpr_0, value=length)\n    let i : Uint256 = Uint256(low=0, high=0)\n    let (i : Uint256) = __warp_loop_0(Uint256(low=32, high=0), headStart, i, length, value0)\n    let (__warp_subexpr_1 : Uint256) = is_gt(i, length)\n    __warp_if_0(__warp_subexpr_1, headStart, length)\n    let (__warp_subexpr_4 : Uint256) = u256_add(length, Uint256(low=31, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_and(\n        __warp_subexpr_4,\n        Uint256(low=340282366920938463463374607431768211424, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_2 : Uint256) = u256_add(headStart, __warp_subexpr_3)\n    let (tail : Uint256) = u256_add(__warp_subexpr_2, Uint256(low=64, high=0))\n    return (tail)\nend\n\nfunc abi_decode_addresst_uint256{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256, value1 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=64, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (value1 : Uint256) = calldataload(Uint256(low=36, high=0))\n    return (value0, value1)\nend\n\nfunc fun_approve{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_spender : Uint256, var_value : Uint256) -> (var : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_spender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=dataSlot)\n    let (__warp_subexpr_1 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_1, value=var_value)\n    let (_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    uint256_mstore(offset=_1, value=var_value)\n    let (__warp_subexpr_2 : Uint256) = caller()\n    log3(\n        _1,\n        Uint256(low=32, high=0),\n        Uint256(low=293775384895699468565546264665434339621, high=186569000182439804704099571914554377459),\n        __warp_subexpr_2,\n        var_spender)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc abi_encode_bool{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_zero(value0)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    uint256_mstore(offset=headStart, value=__warp_subexpr_0)\n    return (tail)\nend\n\nfunc abi_encode_uint256{memory_dict : DictAccess*, msize, range_check_ptr}(\n        headStart : Uint256, value0 : Uint256) -> (tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=headStart, value=value0)\n    return (tail)\nend\n\nfunc abi_decode_addresst_addresst_uint256{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256, value1 : Uint256, value2 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=96, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    let (value1 : Uint256) = calldataload(Uint256(low=36, high=0))\n    let (value2 : Uint256) = calldataload(Uint256(low=68, high=0))\n    return (value0, value1, value2)\nend\n\nfunc require_helper_stringliteral_d9f1{range_check_ptr}(condition : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(condition)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc mapping_index_access_mapping_address_uint256_of_address_2932{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}(key : Uint256) -> (dataSlot : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    return (dataSlot)\nend\n\nfunc require_helper_stringliteral_81d4{range_check_ptr}(condition : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(condition)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc mapping_index_access_mapping_address_uint256_of_address_2934{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}(key : Uint256) -> (dataSlot : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    return (dataSlot)\nend\n\nfunc mapping_index_access_mapping_address_uint256_of_address{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}(slot : Uint256, key : Uint256) -> (\n        dataSlot : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=slot)\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    return (dataSlot)\nend\n\nfunc require_helper_stringliteral_dc58{range_check_ptr}(condition : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(condition)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc checked_sub_uint256{range_check_ptr}(x : Uint256, y : Uint256) -> (diff : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_lt(x, y)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (diff : Uint256) = uint256_sub(x, y)\n    return (diff)\nend\n\nfunc checked_add_uint256{range_check_ptr}(x : Uint256, y : Uint256) -> (sum : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = uint256_not(y)\n    let (__warp_subexpr_0 : Uint256) = is_gt(x, __warp_subexpr_1)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (sum : Uint256) = u256_add(x, y)\n    return (sum)\nend\n\nfunc __warp_block_1{range_check_ptr, syscall_ptr : felt*}(var_to : Uint256) -> (expr : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = address()\n    let (__warp_subexpr_0 : Uint256) = is_eq(var_to, __warp_subexpr_1)\n    let (expr : Uint256) = is_zero(__warp_subexpr_0)\n    return (expr)\nend\n\nfunc __warp_if_1{range_check_ptr, syscall_ptr : felt*}(expr : Uint256, var_to : Uint256) -> (\n        expr : Uint256):\n    alloc_locals\n    if expr.low + expr.high != 0:\n        let (expr : Uint256) = __warp_block_1(var_to)\n        return (expr)\n    else:\n        return (expr)\n    end\nend\n\nfunc __warp_block_3{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _2 : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(_2, var_value)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    require_helper_stringliteral_dc58(__warp_subexpr_0)\n    let (__warp_subexpr_5 : Uint256) = caller()\n    let (__warp_subexpr_4 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2934(\n        var_from)\n    let (__warp_subexpr_3 : Uint256) = checked_sub_uint256(_2, var_value)\n    let (__warp_subexpr_2 : Uint256) = mapping_index_access_mapping_address_uint256_of_address(\n        __warp_subexpr_4, __warp_subexpr_5)\n    sstore(key=__warp_subexpr_2, value=__warp_subexpr_3)\n    return ()\nend\n\nfunc __warp_if_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _2 : Uint256, __warp_subexpr_3 : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_3.low + __warp_subexpr_3.high != 0:\n        __warp_block_3(_2, var_from, var_value)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_2{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = caller()\n    let (__warp_subexpr_1 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2934(\n        var_from)\n    let (__warp_subexpr_0 : Uint256) = mapping_index_access_mapping_address_uint256_of_address(\n        __warp_subexpr_1, __warp_subexpr_2)\n    let (_2 : Uint256) = sload(__warp_subexpr_0)\n    let (__warp_subexpr_4 : Uint256) = is_eq(\n        _2,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_3 : Uint256) = is_zero(__warp_subexpr_4)\n    __warp_if_2(_2, __warp_subexpr_3, var_from, var_value)\n    return ()\nend\n\nfunc __warp_if_3{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        __warp_subexpr_4 : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_4.low + __warp_subexpr_4.high != 0:\n        __warp_block_2(var_from, var_value)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc fun_transferFrom{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_from : Uint256, var_to : Uint256, var_value : Uint256) -> (var : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(var_to)\n    let (expr : Uint256) = is_zero(__warp_subexpr_0)\n    let (expr : Uint256) = __warp_if_1(expr, var_to)\n    require_helper_stringliteral_d9f1(expr)\n    let (__warp_subexpr_1 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(\n        var_from)\n    let (_1 : Uint256) = sload(__warp_subexpr_1)\n    let (__warp_subexpr_3 : Uint256) = is_lt(_1, var_value)\n    let (__warp_subexpr_2 : Uint256) = is_zero(__warp_subexpr_3)\n    require_helper_stringliteral_81d4(__warp_subexpr_2)\n    let (__warp_subexpr_6 : Uint256) = caller()\n    let (__warp_subexpr_5 : Uint256) = is_eq(var_from, __warp_subexpr_6)\n    let (__warp_subexpr_4 : Uint256) = is_zero(__warp_subexpr_5)\n    __warp_if_3(__warp_subexpr_4, var_from, var_value)\n    let (__warp_subexpr_8 : Uint256) = checked_sub_uint256(_1, var_value)\n    let (__warp_subexpr_7 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(\n        var_from)\n    sstore(key=__warp_subexpr_7, value=__warp_subexpr_8)\n    let (_3 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(var_to)\n    let (__warp_subexpr_10 : Uint256) = sload(_3)\n    let (__warp_subexpr_9 : Uint256) = checked_add_uint256(__warp_subexpr_10, var_value)\n    sstore(key=_3, value=__warp_subexpr_9)\n    let (_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_12 : Uint256) = abi_encode_uint256(_4, var_value)\n    let (__warp_subexpr_11 : Uint256) = uint256_sub(__warp_subexpr_12, _4)\n    log3(\n        _4,\n        __warp_subexpr_11,\n        Uint256(low=198281646424137164560101327737152844783, high=295017599780921710443122883678831087018),\n        var_from,\n        var_to)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc abi_encode_uint8{memory_dict : DictAccess*, msize, range_check_ptr}(headStart : Uint256) -> (\n        tail : Uint256):\n    alloc_locals\n    let (tail : Uint256) = u256_add(headStart, Uint256(low=32, high=0))\n    uint256_mstore(offset=headStart, value=Uint256(low=18, high=0))\n    return (tail)\nend\n\nfunc fun_increaseAllowance{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_spender : Uint256, var_addedValue : Uint256) -> (var_ : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_spender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=dataSlot)\n    let (__warp_subexpr_1 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (_2 : Uint256) = sload(__warp_subexpr_1)\n    let (var_z : Uint256) = checked_add_uint256(_2, var_addedValue)\n    let (__warp_subexpr_2 : Uint256) = is_lt(var_z, _2)\n    if __warp_subexpr_2.low + __warp_subexpr_2.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_3 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_3)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot_1 : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_spender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=dataSlot_1)\n    let (__warp_subexpr_4 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_4, value=var_z)\n    let (_3 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    uint256_mstore(offset=_3, value=var_z)\n    let (__warp_subexpr_5 : Uint256) = caller()\n    log3(\n        _3,\n        Uint256(low=32, high=0),\n        Uint256(low=293775384895699468565546264665434339621, high=186569000182439804704099571914554377459),\n        __warp_subexpr_5,\n        var_spender)\n    let var_ : Uint256 = Uint256(low=1, high=0)\n    return (var_)\nend\n\nfunc require_helper_stringliteral_3be4{range_check_ptr}(condition : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(condition)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_4{range_check_ptr, syscall_ptr : felt*}(var_to : Uint256) -> (expr : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = address()\n    let (__warp_subexpr_0 : Uint256) = is_eq(var_to, __warp_subexpr_1)\n    let (expr : Uint256) = is_zero(__warp_subexpr_0)\n    return (expr)\nend\n\nfunc __warp_if_4{range_check_ptr, syscall_ptr : felt*}(expr : Uint256, var_to : Uint256) -> (\n        expr : Uint256):\n    alloc_locals\n    if expr.low + expr.high != 0:\n        let (expr : Uint256) = __warp_block_4(var_to)\n        return (expr)\n    else:\n        return (expr)\n    end\nend\n\nfunc modifier_auth{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_to : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = sload(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = is_eq(__warp_subexpr_2, Uint256(low=1, high=0))\n    require_helper_stringliteral_3be4(__warp_subexpr_1)\n    let (__warp_subexpr_4 : Uint256) = is_zero(var_to)\n    let (expr : Uint256) = is_zero(__warp_subexpr_4)\n    let (expr : Uint256) = __warp_if_4(expr, var_to)\n    require_helper_stringliteral_d9f1(expr)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_to)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (__warp_subexpr_6 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_5 : Uint256) = sload(__warp_subexpr_6)\n    let (_2 : Uint256) = checked_add_uint256(__warp_subexpr_5, var_value)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_to)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (__warp_subexpr_7 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_7, value=_2)\n    let (_3 : Uint256) = sload(Uint256(low=1, high=0))\n    let (var_z : Uint256) = checked_add_uint256(_3, var_value)\n    let (__warp_subexpr_8 : Uint256) = is_lt(var_z, _3)\n    if __warp_subexpr_8.low + __warp_subexpr_8.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    sstore(key=Uint256(low=1, high=0), value=var_z)\n    let (_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    uint256_mstore(offset=_4, value=var_value)\n    log3(\n        _4,\n        Uint256(low=32, high=0),\n        Uint256(low=198281646424137164560101327737152844783, high=295017599780921710443122883678831087018),\n        Uint256(low=0, high=0),\n        var_to)\n    return ()\nend\n\nfunc copy_literal_to_memory_ad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}() -> (\n        memPtr : Uint256):\n    alloc_locals\n    let (memPtr_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (newFreePtr : Uint256) = u256_add(memPtr_1, Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = is_lt(newFreePtr, memPtr_1)\n    let (__warp_subexpr_1 : Uint256) = is_gt(newFreePtr, Uint256(low=18446744073709551615, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_or(__warp_subexpr_1, __warp_subexpr_2)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=64, high=0), value=newFreePtr)\n    uint256_mstore(offset=memPtr_1, value=Uint256(low=1, high=0))\n    let memPtr : Uint256 = memPtr_1\n    let (__warp_subexpr_3 : Uint256) = u256_add(memPtr_1, Uint256(low=32, high=0))\n    uint256_mstore(\n        offset=__warp_subexpr_3, value=Uint256(low=0, high=66461399789245793645190353014017228800))\n    return (memPtr)\nend\n\nfunc abi_decode_address{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, range_check_ptr}(\n        dataEnd : Uint256) -> (value0 : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = u256_add(\n        dataEnd,\n        Uint256(low=340282366920938463463374607431768211452, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_0 : Uint256) = slt(__warp_subexpr_1, Uint256(low=32, high=0))\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (value0 : Uint256) = calldataload(Uint256(low=4, high=0))\n    return (value0)\nend\n\nfunc modifier_auth_10{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(var_usr : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = sload(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = is_eq(__warp_subexpr_2, Uint256(low=1, high=0))\n    require_helper_stringliteral_3be4(__warp_subexpr_1)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_usr)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_4 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_4, value=Uint256(low=1, high=0))\n    let (__warp_subexpr_5 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    log2(\n        __warp_subexpr_5,\n        Uint256(low=0, high=0),\n        Uint256(low=223900192535450488218712201491897670240, high=293833134190415102004153989462159305800),\n        var_usr)\n    return ()\nend\n\nfunc getter_fun_balanceOf{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (ret__warp_mangled : Uint256) = sload(__warp_subexpr_0)\n    return (ret__warp_mangled)\nend\n\nfunc getter_fun_nonces{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=4, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (ret__warp_mangled : Uint256) = sload(__warp_subexpr_0)\n    return (ret__warp_mangled)\nend\n\nfunc copy_literal_to_memory_a5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e568{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize, range_check_ptr}() -> (\n        memPtr : Uint256):\n    alloc_locals\n    let (memPtr_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (newFreePtr : Uint256) = u256_add(memPtr_1, Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = is_lt(newFreePtr, memPtr_1)\n    let (__warp_subexpr_1 : Uint256) = is_gt(newFreePtr, Uint256(low=18446744073709551615, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_or(__warp_subexpr_1, __warp_subexpr_2)\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    uint256_mstore(offset=Uint256(low=64, high=0), value=newFreePtr)\n    uint256_mstore(offset=memPtr_1, value=Uint256(low=3, high=0))\n    let memPtr : Uint256 = memPtr_1\n    let (__warp_subexpr_3 : Uint256) = u256_add(memPtr_1, Uint256(low=32, high=0))\n    uint256_mstore(\n        offset=__warp_subexpr_3, value=Uint256(low=0, high=90726483625080109725254310509806616576))\n    return (memPtr)\nend\n\nfunc modifier_auth_28{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(var_usr : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = sload(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = is_eq(__warp_subexpr_2, Uint256(low=1, high=0))\n    require_helper_stringliteral_3be4(__warp_subexpr_1)\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_usr)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_4 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_4, value=Uint256(low=0, high=0))\n    let (__warp_subexpr_5 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    log2(\n        __warp_subexpr_5,\n        Uint256(low=0, high=0),\n        Uint256(low=206429476217168368767601451326892221723, high=32256188360163916496962365474236119071),\n        var_usr)\n    return ()\nend\n\nfunc update_storage_value_offsett_uint256_to_uint256{\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(value : Uint256) -> ():\n    alloc_locals\n    sstore(key=Uint256(low=1, high=0), value=value)\n    return ()\nend\n\nfunc __warp_block_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}() -> (expr : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_3 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = sload(__warp_subexpr_3)\n    let (__warp_subexpr_1 : Uint256) = is_eq(__warp_subexpr_2, Uint256(low=1, high=0))\n    let (expr : Uint256) = is_zero(__warp_subexpr_1)\n    return (expr)\nend\n\nfunc __warp_if_5{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(expr : Uint256) -> (\n        expr : Uint256):\n    alloc_locals\n    if expr.low + expr.high != 0:\n        let (expr : Uint256) = __warp_block_5()\n        return (expr)\n    else:\n        return (expr)\n    end\nend\n\nfunc __warp_block_7{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _2 : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = is_lt(_2, var_value)\n    let (__warp_subexpr_0 : Uint256) = is_zero(__warp_subexpr_1)\n    require_helper_stringliteral_dc58(__warp_subexpr_0)\n    let (__warp_subexpr_5 : Uint256) = caller()\n    let (__warp_subexpr_4 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2934(\n        var_from)\n    let (__warp_subexpr_3 : Uint256) = checked_sub_uint256(_2, var_value)\n    let (__warp_subexpr_2 : Uint256) = mapping_index_access_mapping_address_uint256_of_address(\n        __warp_subexpr_4, __warp_subexpr_5)\n    sstore(key=__warp_subexpr_2, value=__warp_subexpr_3)\n    return ()\nend\n\nfunc __warp_if_6{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        _2 : Uint256, __warp_subexpr_3 : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_3.low + __warp_subexpr_3.high != 0:\n        __warp_block_7(_2, var_from, var_value)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_6{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_2 : Uint256) = caller()\n    let (__warp_subexpr_1 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2934(\n        var_from)\n    let (__warp_subexpr_0 : Uint256) = mapping_index_access_mapping_address_uint256_of_address(\n        __warp_subexpr_1, __warp_subexpr_2)\n    let (_2 : Uint256) = sload(__warp_subexpr_0)\n    let (__warp_subexpr_4 : Uint256) = is_eq(\n        _2,\n        Uint256(low=340282366920938463463374607431768211455, high=340282366920938463463374607431768211455))\n    let (__warp_subexpr_3 : Uint256) = is_zero(__warp_subexpr_4)\n    __warp_if_6(_2, __warp_subexpr_3, var_from, var_value)\n    return ()\nend\n\nfunc __warp_if_7{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        expr : Uint256, var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    if expr.low + expr.high != 0:\n        __warp_block_6(var_from, var_value)\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc fun_burn{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_from : Uint256, var_value : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(\n        var_from)\n    let (_1 : Uint256) = sload(__warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = is_lt(_1, var_value)\n    let (__warp_subexpr_1 : Uint256) = is_zero(__warp_subexpr_2)\n    require_helper_stringliteral_81d4(__warp_subexpr_1)\n    let (__warp_subexpr_4 : Uint256) = caller()\n    let (__warp_subexpr_3 : Uint256) = is_eq(var_from, __warp_subexpr_4)\n    let (expr : Uint256) = is_zero(__warp_subexpr_3)\n    let (expr : Uint256) = __warp_if_5(expr)\n    __warp_if_7(expr, var_from, var_value)\n    let (__warp_subexpr_6 : Uint256) = checked_sub_uint256(_1, var_value)\n    let (__warp_subexpr_5 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(\n        var_from)\n    sstore(key=__warp_subexpr_5, value=__warp_subexpr_6)\n    let (__warp_subexpr_8 : Uint256) = sload(Uint256(low=1, high=0))\n    let (__warp_subexpr_7 : Uint256) = checked_sub_uint256(__warp_subexpr_8, var_value)\n    update_storage_value_offsett_uint256_to_uint256(__warp_subexpr_7)\n    let (_3 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_10 : Uint256) = abi_encode_uint256(_3, var_value)\n    let (__warp_subexpr_9 : Uint256) = uint256_sub(__warp_subexpr_10, _3)\n    log3(\n        _3,\n        __warp_subexpr_9,\n        Uint256(low=198281646424137164560101327737152844783, high=295017599780921710443122883678831087018),\n        var_from,\n        Uint256(low=0, high=0))\n    return ()\nend\n\nfunc fun_decreaseAllowance{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_spender : Uint256, var_subtractedValue : Uint256) -> (var : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_0)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_spender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=dataSlot)\n    let (__warp_subexpr_1 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (_2 : Uint256) = sload(__warp_subexpr_1)\n    let (_3 : Uint256) = is_lt(_2, var_subtractedValue)\n    let (__warp_subexpr_2 : Uint256) = is_zero(_3)\n    require_helper_stringliteral_dc58(__warp_subexpr_2)\n    if _3.low + _3.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (diff : Uint256) = uint256_sub(_2, var_subtractedValue)\n    let (__warp_subexpr_3 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_3)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot_1 : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    uint256_mstore(offset=Uint256(low=0, high=0), value=var_spender)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=dataSlot_1)\n    let (__warp_subexpr_4 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_4, value=diff)\n    let (_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    uint256_mstore(offset=_4, value=diff)\n    let (__warp_subexpr_5 : Uint256) = caller()\n    log3(\n        _4,\n        Uint256(low=32, high=0),\n        Uint256(low=293775384895699468565546264665434339621, high=186569000182439804704099571914554377459),\n        __warp_subexpr_5,\n        var_spender)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc __warp_block_8{range_check_ptr, syscall_ptr : felt*}(var_to : Uint256) -> (expr : Uint256):\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = address()\n    let (__warp_subexpr_0 : Uint256) = is_eq(var_to, __warp_subexpr_1)\n    let (expr : Uint256) = is_zero(__warp_subexpr_0)\n    return (expr)\nend\n\nfunc __warp_if_8{range_check_ptr, syscall_ptr : felt*}(expr : Uint256, var_to : Uint256) -> (\n        expr : Uint256):\n    alloc_locals\n    if expr.low + expr.high != 0:\n        let (expr : Uint256) = __warp_block_8(var_to)\n        return (expr)\n    else:\n        return (expr)\n    end\nend\n\nfunc fun_transfer{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(\n        var_to : Uint256, var_value : Uint256) -> (var : Uint256):\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_zero(var_to)\n    let (expr : Uint256) = is_zero(__warp_subexpr_0)\n    let (expr : Uint256) = __warp_if_8(expr, var_to)\n    require_helper_stringliteral_d9f1(expr)\n    let (__warp_subexpr_1 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_1)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (__warp_subexpr_2 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (_1 : Uint256) = sload(__warp_subexpr_2)\n    let (_2 : Uint256) = is_lt(_1, var_value)\n    let (__warp_subexpr_3 : Uint256) = is_zero(_2)\n    require_helper_stringliteral_81d4(__warp_subexpr_3)\n    if _2.low + _2.high != 0:\n        assert 0 = 1\n        jmp rel 0\n    end\n    let (__warp_subexpr_4 : Uint256) = caller()\n    uint256_mstore(offset=Uint256(low=0, high=0), value=__warp_subexpr_4)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=2, high=0))\n    let (__warp_subexpr_6 : Uint256) = uint256_sub(_1, var_value)\n    let (__warp_subexpr_5 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    sstore(key=__warp_subexpr_5, value=__warp_subexpr_6)\n    let (_3 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2932(var_to)\n    let (__warp_subexpr_8 : Uint256) = sload(_3)\n    let (__warp_subexpr_7 : Uint256) = checked_add_uint256(__warp_subexpr_8, var_value)\n    sstore(key=_3, value=__warp_subexpr_7)\n    let (_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    uint256_mstore(offset=_4, value=var_value)\n    let (__warp_subexpr_9 : Uint256) = caller()\n    log3(\n        _4,\n        Uint256(low=32, high=0),\n        Uint256(low=198281646424137164560101327737152844783, high=295017599780921710443122883678831087018),\n        __warp_subexpr_9,\n        var_to)\n    let var : Uint256 = Uint256(low=1, high=0)\n    return (var)\nend\n\nfunc getter_fun_wards{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*}(key : Uint256) -> (\n        ret__warp_mangled : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=0, high=0))\n    let (__warp_subexpr_0 : Uint256) = uint256_pedersen(\n        Uint256(low=0, high=0), Uint256(low=64, high=0))\n    let (ret__warp_mangled : Uint256) = sload(__warp_subexpr_0)\n    return (ret__warp_mangled)\nend\n\nfunc mapping_index_access_mapping_address_uint256_of_address_2924{\n        bitwise_ptr : BitwiseBuiltin*, memory_dict : DictAccess*, msize,\n        pedersen_ptr : HashBuiltin*, range_check_ptr}(key : Uint256) -> (dataSlot : Uint256):\n    alloc_locals\n    uint256_mstore(offset=Uint256(low=0, high=0), value=key)\n    uint256_mstore(offset=Uint256(low=32, high=0), value=Uint256(low=3, high=0))\n    let (dataSlot : Uint256) = uint256_pedersen(Uint256(low=0, high=0), Uint256(low=64, high=0))\n    return (dataSlot)\nend\n\nfunc __warp_block_11{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (\n        ret_mpos : Uint256) = copy_literal_to_memory_0b1461ddc0c1d5ded79a1db0f74dae949050a7c0b28728c724b24958c27a328b(\n        )\n    let (memPos : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_string(memPos, ret_mpos)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos)\n    warp_return(memPos, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_13{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param : Uint256, param_1 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret__warp_mangled : Uint256) = fun_approve(param, param_1)\n    let (memPos_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_1, ret__warp_mangled)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_1)\n    warp_return(memPos_1, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_15{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (ret_1 : Uint256) = sload(Uint256(low=1, high=0))\n    let (memPos_2 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_uint256(memPos_2, ret_1)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_2)\n    warp_return(memPos_2, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_17{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_2 : Uint256, param_3 : Uint256,\n        param_4 : Uint256) = abi_decode_addresst_addresst_uint256(__warp_subexpr_0)\n    let (ret_2 : Uint256) = fun_transferFrom(param_2, param_3, param_4)\n    let (memPos_3 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_3, ret_2)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_3)\n    warp_return(memPos_3, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_19{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (memPos_4 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_uint8(memPos_4)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_4)\n    warp_return(memPos_4, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_21{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_5 : Uint256, param_6 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret_3 : Uint256) = fun_increaseAllowance(param_5, param_6)\n    let (memPos_5 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_5, ret_3)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_5)\n    warp_return(memPos_5, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_23{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_7 : Uint256, param_8 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    modifier_auth(param_7, param_8)\n    let (__warp_subexpr_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    warp_return(__warp_subexpr_1, Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_block_25{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (\n        ret_mpos_1 : Uint256) = copy_literal_to_memory_ad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a5(\n        )\n    let (memPos_6 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_string(memPos_6, ret_mpos_1)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_6)\n    warp_return(memPos_6, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_27{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    modifier_auth_10(__warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    warp_return(__warp_subexpr_2, Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_block_29{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    let (ret_4 : Uint256) = getter_fun_balanceOf(__warp_subexpr_0)\n    let (memPos_7 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_3 : Uint256) = abi_encode_uint256(memPos_7, ret_4)\n    let (__warp_subexpr_2 : Uint256) = uint256_sub(__warp_subexpr_3, memPos_7)\n    warp_return(memPos_7, __warp_subexpr_2)\n    return ()\nend\n\nfunc __warp_block_31{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    let (ret_5 : Uint256) = getter_fun_nonces(__warp_subexpr_0)\n    let (memPos_8 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_3 : Uint256) = abi_encode_uint256(memPos_8, ret_5)\n    let (__warp_subexpr_2 : Uint256) = uint256_sub(__warp_subexpr_3, memPos_8)\n    warp_return(memPos_8, __warp_subexpr_2)\n    return ()\nend\n\nfunc __warp_block_33{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, range_check_ptr, termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    abi_decode(__warp_subexpr_0)\n    let (\n        ret_mpos_2 : Uint256) = copy_literal_to_memory_a5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e568(\n        )\n    let (memPos_9 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_string(memPos_9, ret_mpos_2)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_9)\n    warp_return(memPos_9, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_35{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    modifier_auth_28(__warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    warp_return(__warp_subexpr_2, Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_block_37{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_9 : Uint256, param_10 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    fun_burn(param_9, param_10)\n    let (__warp_subexpr_1 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    warp_return(__warp_subexpr_1, Uint256(low=0, high=0))\n    return ()\nend\n\nfunc __warp_block_39{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_11 : Uint256, param_12 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret_6 : Uint256) = fun_decreaseAllowance(param_11, param_12)\n    let (memPos_10 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_10, ret_6)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_10)\n    warp_return(memPos_10, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_41{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_13 : Uint256, param_14 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (ret_7 : Uint256) = fun_transfer(param_13, param_14)\n    let (memPos_11 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_2 : Uint256) = abi_encode_bool(memPos_11, ret_7)\n    let (__warp_subexpr_1 : Uint256) = uint256_sub(__warp_subexpr_2, memPos_11)\n    warp_return(memPos_11, __warp_subexpr_1)\n    return ()\nend\n\nfunc __warp_block_43{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_1 : Uint256) = calldatasize()\n    let (__warp_subexpr_0 : Uint256) = abi_decode_address(__warp_subexpr_1)\n    let (ret_8 : Uint256) = getter_fun_wards(__warp_subexpr_0)\n    let (memPos_12 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_3 : Uint256) = abi_encode_uint256(memPos_12, ret_8)\n    let (__warp_subexpr_2 : Uint256) = uint256_sub(__warp_subexpr_3, memPos_12)\n    warp_return(memPos_12, __warp_subexpr_2)\n    return ()\nend\n\nfunc __warp_block_45{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldatasize()\n    let (param_15 : Uint256, param_16 : Uint256) = abi_decode_addresst_uint256(__warp_subexpr_0)\n    let (__warp_subexpr_2 : Uint256) = mapping_index_access_mapping_address_uint256_of_address_2924(\n        param_15)\n    let (__warp_subexpr_1 : Uint256) = mapping_index_access_mapping_address_uint256_of_address(\n        __warp_subexpr_2, param_16)\n    let (value : Uint256) = sload(__warp_subexpr_1)\n    let (memPos_13 : Uint256) = uint256_mload(Uint256(low=64, high=0))\n    let (__warp_subexpr_4 : Uint256) = abi_encode_uint256(memPos_13, value)\n    let (__warp_subexpr_3 : Uint256) = uint256_sub(__warp_subexpr_4, memPos_13)\n    warp_return(memPos_13, __warp_subexpr_3)\n    return ()\nend\n\nfunc __warp_if_9{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_45()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __warp_block_44{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=3714247998, high=0))\n    __warp_if_9(__warp_subexpr_0)\n    return ()\nend\n\nfunc __warp_if_10{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_43()\n        return ()\n    else:\n        __warp_block_44(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_42{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=3207937467, high=0))\n    __warp_if_10(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_11{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_41()\n        return ()\n    else:\n        __warp_block_42(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_40{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2835717307, high=0))\n    __warp_if_11(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_12{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_39()\n        return ()\n    else:\n        __warp_block_40(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_38{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2757214935, high=0))\n    __warp_if_12(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_13{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_37()\n        return ()\n    else:\n        __warp_block_38(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_36{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2646777772, high=0))\n    __warp_if_13(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_14{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_35()\n        return ()\n    else:\n        __warp_block_36(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_34{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2622662641, high=0))\n    __warp_if_14(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_15{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_33()\n        return ()\n    else:\n        __warp_block_34(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_32{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2514000705, high=0))\n    __warp_if_15(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_16{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_31()\n        return ()\n    else:\n        __warp_block_32(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_30{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=2127478272, high=0))\n    __warp_if_16(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_17{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_29()\n        return ()\n    else:\n        __warp_block_30(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_28{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1889567281, high=0))\n    __warp_if_17(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_18{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_27()\n        return ()\n    else:\n        __warp_block_28(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_26{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1710941022, high=0))\n    __warp_if_18(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_19{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_25()\n        return ()\n    else:\n        __warp_block_26(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_24{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1425886544, high=0))\n    __warp_if_19(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_20{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_23()\n        return ()\n    else:\n        __warp_block_24(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_22{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=1086394137, high=0))\n    __warp_if_20(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_21{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_21()\n        return ()\n    else:\n        __warp_block_22(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_20{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=961581905, high=0))\n    __warp_if_21(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_22{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_19()\n        return ()\n    else:\n        __warp_block_20(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_18{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=826074471, high=0))\n    __warp_if_22(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_23{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_17()\n        return ()\n    else:\n        __warp_block_18(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_16{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=599290589, high=0))\n    __warp_if_23(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_24{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_15()\n        return ()\n    else:\n        __warp_block_16(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_14{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=404098525, high=0))\n    __warp_if_24(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_25{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_13()\n        return ()\n    else:\n        __warp_block_14(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_12{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=157198259, high=0))\n    __warp_if_25(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_if_26{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_0 : Uint256, match_var : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_0.low + __warp_subexpr_0.high != 0:\n        __warp_block_11()\n        return ()\n    else:\n        __warp_block_12(match_var)\n        return ()\n    end\nend\n\nfunc __warp_block_10{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(match_var : Uint256) -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = is_eq(match_var, Uint256(low=117300739, high=0))\n    __warp_if_26(__warp_subexpr_0, match_var)\n    return ()\nend\n\nfunc __warp_block_9{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = calldataload(Uint256(low=0, high=0))\n    let (match_var : Uint256) = u256_shr(Uint256(low=224, high=0), __warp_subexpr_0)\n    __warp_block_10(match_var)\n    return ()\nend\n\nfunc __warp_if_27{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}(__warp_subexpr_1 : Uint256) -> ():\n    alloc_locals\n    if __warp_subexpr_1.low + __warp_subexpr_1.high != 0:\n        __warp_block_9()\n        return ()\n    else:\n        return ()\n    end\nend\n\nfunc __main_meat{\n        bitwise_ptr : BitwiseBuiltin*, exec_env : ExecutionEnvironment*, memory_dict : DictAccess*,\n        msize, pedersen_ptr : HashBuiltin*, range_check_ptr, syscall_ptr : felt*,\n        termination_token}() -> ():\n    alloc_locals\n    let (__warp_subexpr_0 : Uint256) = __warp_identity_Uint256(Uint256(low=128, high=0))\n    uint256_mstore(offset=Uint256(low=64, high=0), value=__warp_subexpr_0)\n    let (__warp_subexpr_3 : Uint256) = calldatasize()\n    let (__warp_subexpr_2 : Uint256) = is_lt(__warp_subexpr_3, Uint256(low=4, high=0))\n    let (__warp_subexpr_1 : Uint256) = is_zero(__warp_subexpr_2)\n    __warp_if_27(__warp_subexpr_1)\n    if termination_token == 1:\n        return ()\n    end\n    assert 0 = 1\n    jmp rel 0\nend\n", "sol_abi": [{"inputs": [], "stateMutability": "nonpayable", "type": "constructor"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "owner", "type": "address"}, {"indexed": true, "internalType": "address", "name": "spender", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}], "name": "Approval", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "usr", "type": "address"}], "name": "Deny", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "usr", "type": "address"}], "name": "Rely", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "from", "type": "address"}, {"indexed": true, "internalType": "address", "name": "to", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}], "name": "Transfer", "type": "event"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}, {"internalType": "address", "name": "", "type": "address"}], "name": "allowance", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "approve", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}], "name": "balanceOf", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "from", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "decimals", "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "subtractedValue", "type": "uint256"}], "name": "decreaseAllowance", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "usr", "type": "address"}], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "addedValue", "type": "uint256"}], "name": "increaseAllowance", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "name", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}], "name": "nonces", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "usr", "type": "address"}], "name": "rely", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "symbol", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "totalSupply", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "transfer", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "transferFrom", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "version", "outputs": [{"internalType": "string", "name": "", "type": "string"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}], "name": "wards", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}]}